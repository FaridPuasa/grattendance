<!DOCTYPE html>
<html>
<head>
    <title>Sign In</title>
    
    <!-- Include the Bing Maps script -->
<script src="https://www.bing.com/api/maps/mapcontrol?key=AgkWMZlk5ts6xb8cJkzUar2iJMWTexduafRzsyANqeAF2b_PN0D2CZAKo8hfNqkB&callback=loadMapScenario" async defer></script>

</head>
<body>
    <h1>Sign In</h1>

    <!-- Add a div for the Bing Maps -->
    <div id="map" style="width: 50%; height: 400px;"></div>

   <!-- Form for sign-in -->
   <form id="signInForm" action="/signin" method="POST">
    <label for="username">Username:</label>
    <input type="text" name="username" required>
    <input type="hidden" id="latitude" name="latitude" value="YOUR_LATITUDE" />
    <input type="hidden" id="longitude" name="longitude" value="YOUR_LONGITUDE" />
    <button type="submit" id="signInBtn">Sign In</button>
</form>

    <!-- Your JavaScript for Bing Maps integration -->
    <script>

let map;

function loadMapScenario() {
    map = new Microsoft.Maps.Map(document.getElementById('map'), {
        credentials: 'AgkWMZlk5ts6xb8cJkzUar2iJMWTexduafRzsyANqeAF2b_PN0D2CZAKo8hfNqkB'
    });
}
        // Function to update the location fields in the form
        function updateLocationFields(latitude, longitude, address) {
            document.getElementById('latitude').value = latitude;
            document.getElementById('longitude').value = longitude;
            document.getElementById('location').value = address;
        }
    
       // Function to update the map with location and reverse geocode to get the address
       function updateMapWithLocation(latitude, longitude) {
            const userLocation = new Microsoft.Maps.Location(latitude, longitude);
            map.setView({ center: userLocation, zoom: 10 });

            // Example marker at the user's location
            const pin = new Microsoft.Maps.Pushpin(userLocation);
            map.entities.push(pin);

            // Reverse geocode to get the address based on latitude and longitude
            Microsoft.Maps.loadModule('Microsoft.Maps.Search', function () {
                const searchManager = new Microsoft.Maps.Search.SearchManager(map);
                const reverseGeocodeRequestOptions = {
                    location: userLocation,
                    callback: function (result) {
                        if (result && result.results && result.results.length > 0) {
                            const address = result.results[0].address.formattedAddress;
                            updateLocationFields(latitude, longitude, address); // Update location fields with the retrieved address
                        } else {
                            updateLocationFields(latitude, longitude, 'Location not found'); // Handle case where location is not found
                        }
                    },
                    errorCallback: function (e) {
                        // Display error details in the console
                        console.error('Error during reverse geocoding:', e);
                        updateLocationFields(latitude, longitude, 'Error fetching location'); // Handle error case
                    }
                };
                searchManager.reverseGeocode(reverseGeocodeRequestOptions);
            });
        
}

// Function to get the user's location
function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition);
        } else {
            alert("Geolocation is not supported by this browser.");
        }
    }

    // Function to display position and submit the form with current location
    function showPosition(position) {
        const latitude = position.coords.latitude;
        const longitude = position.coords.longitude;

        // Set latitude and longitude values in the hidden input fields
        document.getElementById("latitude").value = latitude;
        document.getElementById("longitude").value = longitude;

        // Submit the form when location is obtained
        document.getElementById("signInBtn").click(); // or document.getElementById("signOutBtn").click();
    }

    // Event listener for sign-in form submission
document.getElementById("signInForm").addEventListener("submit", async (event) => {
    event.preventDefault(); // Prevent default form submission

    getLocation(); // Get location and submit sign-in form

    try {
        const response = await fetch('/signin', {
            method: 'POST',
            body: new URLSearchParams(new FormData(document.getElementById('signInForm')))
        });

        if (response.ok) {
            // Handle success
            console.log('Sign-in successful!');
        } else {
            // Handle failure
            console.error('Sign-in failed!');
        }
    } catch (error) {
        console.error('Error occurred:', error);
    }
});

// Event listeners for sign-in and sign-out buttons
document.getElementById("signInBtn").addEventListener("click", () => {
    getLocation(); // Get location and submit sign-in form
 });

document.getElementById("signOutBtn").addEventListener("click", () => {
    getLocation(); // Get location and submit sign-out form
});
</script>
</body>
</html>